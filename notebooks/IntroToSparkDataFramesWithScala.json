{"paragraphs":[{"text":"%md\n\n## Intro to Spark SQL and DataFrames with Scala\n#### Exploring an Airline Dataset\n@RobHryniewicz\nver 0.5\n","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998816_-900073236","id":"20160519-140958_651523470","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Intro to Spark SQL and DataFrames with Scala</h2>\n<h4>Exploring an Airline Dataset</h4>\n<p>@RobHryniewicz\n<br  />ver 0.5</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:326"},{"text":"%md\n### Introduction\n\nIn this lab you will use Spark SQL via DataFrames API in Part 1 of the lab and SQL in Part 2 of the lab to explore an Airline Dataset. This is a very interesting dataset that is further explored in a more advanced lab by applying Machine Learning methods for predictive analytics.","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":217,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998819_-899688487","id":"20160519-140958_135844237","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Introduction</h3>\n<p>In this lab you will use Spark SQL via DataFrames API in Part 1 of the lab and SQL in Part 2 of the lab to explore an Airline Dataset. This is a very interesting dataset that is further explored in a more advanced lab by applying Machine Learning methods for predictive analytics.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:327"},{"text":"%md\n### Concepts\n\nA DataFrame is a distributed collection of data organized into named columns. \n#\nIt is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood. \n#\nDataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs. \n#\n**[See SparkSQL docs for more info](http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes)**","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998820_-901612232","id":"20160519-140958_358974498","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Concepts</h3>\n<p>A DataFrame is a distributed collection of data organized into named columns.</p>\n<h1></h1>\n<p>It is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood.</p>\n<h1></h1>\n<p>DataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs.</p>\n<h1></h1>\n<p><strong><a href=\"http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes\">See SparkSQL docs for more info</a></strong></p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:328"},{"text":"%md\n\nThroughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here's an excellent [Scala Basics Tutorial](http://www.dhgarrette.com/nlpclass/scala/basics.html).","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998821_-901996980","id":"20160519-140958_1002823463","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Throughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here's an excellent <a href=\"http://www.dhgarrette.com/nlpclass/scala/basics.html\">Scala Basics Tutorial</a>.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:329"},{"text":"%md\n### Lab Setup & Pre-Check\nBefore we proceed, let's set Spark's external package dependencies and then verify the Spark Version (you should be running at minimum Spark 1.6 for this lab).","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998822_-900842734","id":"20160519-140958_1002280985","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Lab Setup &amp; Pre-Check</h3>\n<p>Before we proceed, let's set Spark's external package dependencies and then verify the Spark Version (you should be running at minimum Spark 1.6 for this lab).</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:330"},{"text":"%md\nTo run a paragraph in a Zeppelin notebook you can either click the `play` button (blue triangle) on the right-hand side or simply press `Shift + Enter`.","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998822_-900842734","id":"20160519-140958_474787827","result":{"code":"SUCCESS","type":"HTML","msg":"<p>To run a paragraph in a Zeppelin notebook you can either click the <code>play</code> button (blue triangle) on the right-hand side or simply press <code>Shift + Enter</code>.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:331"},{"title":"Set External Spark Package Dependencies","text":"%dep\n\n// IMPORTANT! \n// This step/paragraph must be executed FIRST; if you have already executed other commands/paragraphs, \n//   please click \"Interpreter\" in the menu above and restart the \"spark\" interpreter and then run this paragraph\n//   before any other one.\n\nz.reset()\nz.load(\"com.databricks:spark-csv_2.11:1.4.0\")   // Spark CSV package","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998823_-901227483","id":"20160519-140958_1857259784","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:332"},{"text":"%md\n**Note**: The first time you run `sc.version` in the paragraph below, several services will initialize in the background. \nThis may take **1~2 min** so please **be patient**. Afterwards, each paragraph should run much more quickly since all the services will already be running.","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998824_-903151227","id":"20160519-140958_1290380543","result":{"code":"SUCCESS","type":"HTML","msg":"<p><strong>Note</strong>: The first time you run <code>sc.version</code> in the paragraph below, several services will initialize in the background.\n<br  />This may take <strong>1~2 min</strong> so please <strong>be patient</strong>. Afterwards, each paragraph should run much more quickly since all the services will already be running.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:333"},{"title":"Check Spark Version","text":"sc.version","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998824_-903151227","id":"20160519-140958_2135918795","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"text":"%md ###Start of Lab\n","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998824_-903151227","id":"20160519-140958_1050544313","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Start of Lab</h3>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:335"},{"text":"%md\nIn the next paragraph we are going to download datasets using shell commands. A shell command in a Zeppelin notebook can can be invoked by \nprepending a block of shell commands with a line containing `%sh` characters.","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998825_-903535976","id":"20160519-140958_2035206604","result":{"code":"SUCCESS","type":"HTML","msg":"<p>In the next paragraph we are going to download datasets using shell commands. A shell command in a Zeppelin notebook can can be invoked by\n<br  />prepending a block of shell commands with a line containing <code>%sh</code> characters.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"title":"Download Datasets","text":"%sh\n\n# You will now download a subset of 2008 flights (only 100k lines)\n# The full dataset may be found here: http://stat-computing.org/dataexpo/2009/the-data.html\n\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv -O /tmp/flights.csv\necho \"Downloaded!\"","dateUpdated":"May 19, 2016 2:11:02 PM","config":{"enabled":true,"tableHide":false,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sh","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998826_-902381729","id":"20160519-140958_597864012","result":{"code":"SUCCESS","type":"TEXT","msg":"--2016-05-19 14:11:06--  https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv\nResolving raw.githubusercontent.com... 23.235.46.133\nConnecting to raw.githubusercontent.com|23.235.46.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 9719582 (9.3M) [text/plain]\nSaving to: “/tmp/flights.csv”\n\n     0K .......... .......... .......... .......... ..........  0% 1.07M 9s\n    50K .......... .......... .......... .......... ..........  1% 2.46M 6s\n   100K .......... .......... .......... .......... ..........  1% 2.66M 5s\n   150K .......... .......... .......... .......... ..........  2% 1.79M 5s\n   200K .......... .......... .......... .......... ..........  2% 2.87M 5s\n   250K .......... .......... .......... .......... ..........  3% 2.08M 5s\n   300K .......... .......... .......... .......... ..........  3% 2.55M 4s\n   350K .......... .......... .......... .......... ..........  4% 3.74M 4s\n   400K .......... .......... .......... .......... ..........  4% 1.92M 4s\n   450K .......... .......... .......... .......... ..........  5% 2.62M 4s\n   500K .......... .......... .......... .......... ..........  5% 3.66M 4s\n   550K .......... .......... .......... .......... ..........  6% 2.14M 4s\n   600K .......... .......... .......... .......... ..........  6% 4.85M 4s\n   650K .......... .......... .......... .......... ..........  7% 2.68M 4s\n   700K .......... .......... .......... .......... ..........  7% 3.36M 4s\n   750K .......... .......... .......... .......... ..........  8% 3.27M 3s\n   800K .......... .......... .......... .......... ..........  8% 3.21M 3s\n   850K .......... .......... .......... .......... ..........  9% 3.07M 3s\n   900K .......... .......... .......... .......... .......... 10% 4.48M 3s\n   950K .......... .......... .......... .......... .......... 10% 3.16M 3s\n  1000K .......... .......... .......... .......... .......... 11% 5.73M 3s\n  1050K .......... .......... .......... .......... .......... 11% 4.21M 3s\n  1100K .......... .......... .......... .......... .......... 12% 2.89M 3s\n  1150K .......... .......... .......... .......... .......... 12% 5.21M 3s\n  1200K .......... .......... .......... .......... .......... 13% 1.55M 3s\n  1250K .......... .......... .......... .......... .......... 13% 4.96M 3s\n  1300K .......... .......... .......... .......... .......... 14% 4.55M 3s\n  1350K .......... .......... .......... .......... .......... 14% 5.16M 3s\n  1400K .......... .......... .......... .......... .......... 15% 4.30M 3s\n  1450K .......... .......... .......... .......... .......... 15% 2.43M 3s\n  1500K .......... .......... .......... .......... .......... 16% 3.98M 3s\n  1550K .......... .......... .......... .......... .......... 16% 3.51M 3s\n  1600K .......... .......... .......... .......... .......... 17% 4.67M 3s\n  1650K .......... .......... .......... .......... .......... 17% 3.78M 3s\n  1700K .......... .......... .......... .......... .......... 18% 2.61M 3s\n  1750K .......... .......... .......... .......... .......... 18% 10.6M 3s\n  1800K .......... .......... .......... .......... .......... 19% 4.73M 2s\n  1850K .......... .......... .......... .......... .......... 20% 4.42M 2s\n  1900K .......... .......... .......... .......... .......... 20% 5.72M 2s\n  1950K .......... .......... .......... .......... .......... 21% 2.85M 2s\n  2000K .......... .......... .......... .......... .......... 21% 3.02M 2s\n  2050K .......... .......... .......... .......... .......... 22% 4.48M 2s\n  2100K .......... .......... .......... .......... .......... 22% 4.22M 2s\n  2150K .......... .......... .......... .......... .......... 23% 9.12M 2s\n  2200K .......... .......... .......... .......... .......... 23% 4.76M 2s\n  2250K .......... .......... .......... .......... .......... 24% 6.11M 2s\n  2300K .......... .......... .......... .......... .......... 24% 2.22M 2s\n  2350K .......... .......... .......... .......... .......... 25% 1.61M 2s\n  2400K .......... .......... .......... .......... .......... 25% 4.64M 2s\n  2450K .......... .......... .......... .......... .......... 26% 33.8M 2s\n  2500K .......... .......... .......... .......... .......... 26% 51.8M 2s\n  2550K .......... .......... .......... .......... .......... 27% 45.6M 2s\n  2600K .......... .......... .......... .......... .......... 27% 6.73M 2s\n  2650K .......... .......... .......... .......... .......... 28% 3.75M 2s\n  2700K .......... .......... .......... .......... .......... 28% 6.31M 2s\n  2750K .......... .......... .......... .......... .......... 29% 2.25M 2s\n  2800K .......... .......... .......... .......... .......... 30% 9.25M 2s\n  2850K .......... .......... .......... .......... .......... 30% 11.7M 2s\n  2900K .......... .......... .......... .......... .......... 31% 3.77M 2s\n  2950K .......... .......... .......... .......... .......... 31% 2.91M 2s\n  3000K .......... .......... .......... .......... .......... 32% 48.6M 2s\n  3050K .......... .......... .......... .......... .......... 32% 2.10M 2s\n  3100K .......... .......... .......... .......... .......... 33% 3.63M 2s\n  3150K .......... .......... .......... .......... .......... 33%  853K 2s\n  3200K .......... .......... .......... .......... .......... 34% 38.7M 2s\n  3250K .......... .......... .......... .......... .......... 34% 41.8M 2s\n  3300K .......... .......... .......... .......... .......... 35% 69.1M 2s\n  3350K .......... .......... .......... .......... .......... 35% 1.39M 2s\n  3400K .......... .......... .......... .......... .......... 36% 5.37M 2s\n  3450K .......... .......... .......... .......... .......... 36% 5.83M 2s\n  3500K .......... .......... .......... .......... .......... 37% 4.89M 2s\n  3550K .......... .......... .......... .......... .......... 37% 4.29M 2s\n  3600K .......... .......... .......... .......... .......... 38% 1.71M 2s\n  3650K .......... .......... .......... .......... .......... 38% 24.8M 2s\n  3700K .......... .......... .......... .......... .......... 39% 4.57M 2s\n  3750K .......... .......... .......... .......... .......... 40% 9.20M 2s\n  3800K .......... .......... .......... .......... .......... 40% 3.52M 2s\n  3850K .......... .......... .......... .......... .......... 41% 2.78M 2s\n  3900K .......... .......... .......... .......... .......... 41% 5.11M 2s\n  3950K .......... .......... .......... .......... .......... 42% 3.32M 2s\n  4000K .......... .......... .......... .......... .......... 42% 6.42M 2s\n  4050K .......... .......... .......... .......... .......... 43% 2.85M 2s\n  4100K .......... .......... .......... .......... .......... 43% 6.30M 1s\n  4150K .......... .......... .......... .......... .......... 44% 5.19M 1s\n  4200K .......... .......... .......... .......... .......... 44% 4.29M 1s\n  4250K .......... .......... .......... .......... .......... 45% 1.95M 1s\n  4300K .......... .......... .......... .......... .......... 45% 83.5M 1s\n  4350K .......... .......... .......... .......... .......... 46% 4.53M 1s\n  4400K .......... .......... .......... .......... .......... 46% 1.84M 1s\n  4450K .......... .......... .......... .......... .......... 47% 23.8M 1s\n  4500K .......... .......... .......... .......... .......... 47% 10.7M 1s\n  4550K .......... .......... .......... .......... .......... 48% 4.87M 1s\n  4600K .......... .......... .......... .......... .......... 48% 2.38M 1s\n  4650K .......... .......... .......... .......... .......... 49% 13.2M 1s\n  4700K .......... .......... .......... .......... .......... 50% 2.35M 1s\n  4750K .......... .......... .......... .......... .......... 50% 8.93M 1s\n  4800K .......... .......... .......... .......... .......... 51% 2.40M 1s\n  4850K .......... .......... .......... .......... .......... 51% 1.82M 1s\n  4900K .......... .......... .......... .......... .......... 52% 5.59M 1s\n  4950K .......... .......... .......... .......... .......... 52% 5.56M 1s\n  5000K .......... .......... .......... .......... .......... 53% 2.81M 1s\n  5050K .......... .......... .......... .......... .......... 53% 5.49M 1s\n  5100K .......... .......... .......... .......... .......... 54% 4.43M 1s\n  5150K .......... .......... .......... .......... .......... 54% 5.30M 1s\n  5200K .......... .......... .......... .......... .......... 55% 3.85M 1s\n  5250K .......... .......... .......... .......... .......... 55% 4.43M 1s\n  5300K .......... .......... .......... .......... .......... 56% 3.32M 1s\n  5350K .......... .......... .......... .......... .......... 56% 7.53M 1s\n  5400K .......... .......... .......... .......... .......... 57% 3.60M 1s\n  5450K .......... .......... .......... .......... .......... 57% 4.42M 1s\n  5500K .......... .......... .......... .......... .......... 58% 4.40M 1s\n  5550K .......... .......... .......... .......... .......... 58% 4.61M 1s\n  5600K .......... .......... .......... .......... .......... 59% 1.05M 1s\n  5650K .......... .......... .......... .......... .......... 60% 21.7M 1s\n  5700K .......... .......... .......... .......... .......... 60% 3.07M 1s\n  5750K .......... .......... .......... .......... .......... 61% 6.52M 1s\n  5800K .......... .......... .......... .......... .......... 61% 4.01M 1s\n  5850K .......... .......... .......... .......... .......... 62% 3.69M 1s\n  5900K .......... .......... .......... .......... .......... 62% 7.88M 1s\n  5950K .......... .......... .......... .......... .......... 63% 4.17M 1s\n  6000K .......... .......... .......... .......... .......... 63% 2.07M 1s\n  6050K .......... .......... .......... .......... .......... 64% 4.73M 1s\n  6100K .......... .......... .......... .......... .......... 64% 2.58M 1s\n  6150K .......... .......... .......... .......... .......... 65% 9.96M 1s\n  6200K .......... .......... .......... .......... .......... 65% 5.03M 1s\n  6250K .......... .......... .......... .......... .......... 66% 13.2M 1s\n  6300K .......... .......... .......... .......... .......... 66% 3.09M 1s\n  6350K .......... .......... .......... .......... .......... 67% 1.89M 1s\n  6400K .......... .......... .......... .......... .......... 67% 5.07M 1s\n  6450K .......... .......... .......... .......... .......... 68% 6.51M 1s\n  6500K .......... .......... .......... .......... .......... 69% 9.47M 1s\n  6550K .......... .......... .......... .......... .......... 69% 47.1M 1s\n  6600K .......... .......... .......... .......... .......... 70% 6.06M 1s\n  6650K .......... .......... .......... .......... .......... 70% 4.34M 1s\n  6700K .......... .......... .......... .......... .......... 71% 5.32M 1s\n  6750K .......... .......... .......... .......... .......... 71% 4.96M 1s\n  6800K .......... .......... .......... .......... .......... 72% 3.42M 1s\n  6850K .......... .......... .......... .......... .......... 72% 5.26M 1s\n  6900K .......... .......... .......... .......... .......... 73% 3.31M 1s\n  6950K .......... .......... .......... .......... .......... 73% 5.88M 1s\n  7000K .......... .......... .......... .......... .......... 74% 5.13M 1s\n  7050K .......... .......... .......... .......... .......... 74% 3.67M 1s\n  7100K .......... .......... .......... .......... .......... 75% 5.21M 1s\n  7150K .......... .......... .......... .......... .......... 75% 4.31M 1s\n  7200K .......... .......... .......... .......... .......... 76% 1.26M 1s\n  7250K .......... .......... .......... .......... .......... 76% 3.48M 1s\n  7300K .......... .......... .......... .......... .......... 77% 3.52M 1s\n  7350K .......... .......... .......... .......... .......... 77% 5.52M 1s\n  7400K .......... .......... .......... .......... .......... 78% 3.79M 1s\n  7450K .......... .......... .......... .......... .......... 79% 1.77M 1s\n  7500K .......... .......... .......... .......... .......... 79% 3.63M 1s\n  7550K .......... .......... .......... .......... .......... 80% 3.98M 1s\n  7600K .......... .......... .......... .......... .......... 80% 2.84M 0s\n  7650K .......... .......... .......... .......... .......... 81% 4.45M 0s\n  7700K .......... .......... .......... .......... .......... 81% 1.98M 0s\n  7750K .......... .......... .......... .......... .......... 82% 4.05M 0s\n  7800K .......... .......... .......... .......... .......... 82% 4.29M 0s\n  7850K .......... .......... .......... .......... .......... 83% 5.00M 0s\n  7900K .......... .......... .......... .......... .......... 83% 5.09M 0s\n  7950K .......... .......... .......... .......... .......... 84% 5.27M 0s\n  8000K .......... .......... .......... .......... .......... 84% 3.57M 0s\n  8050K .......... .......... .......... .......... .......... 85% 5.29M 0s\n  8100K .......... .......... .......... .......... .......... 85% 3.69M 0s\n  8150K .......... .......... .......... .......... .......... 86% 4.14M 0s\n  8200K .......... .......... .......... .......... .......... 86% 5.18M 0s\n  8250K .......... .......... .......... .......... .......... 87% 3.47M 0s\n  8300K .......... .......... .......... .......... .......... 87% 7.13M 0s\n  8350K .......... .......... .......... .......... .......... 88% 3.17M 0s\n  8400K .......... .......... .......... .......... .......... 89% 5.01M 0s\n  8450K .......... .......... .......... .......... .......... 89% 4.91M 0s\n  8500K .......... .......... .......... .......... .......... 90% 5.05M 0s\n  8550K .......... .......... .......... .......... .......... 90% 5.31M 0s\n  8600K .......... .......... .......... .......... .......... 91% 5.01M 0s\n  8650K .......... .......... .......... .......... .......... 91% 3.87M 0s\n  8700K .......... .......... .......... .......... .......... 92% 5.59M 0s\n  8750K .......... .......... .......... .......... .......... 92% 5.55M 0s\n  8800K .......... .......... .......... .......... .......... 93% 3.59M 0s\n  8850K .......... .......... .......... .......... .......... 93% 5.95M 0s\n  8900K .......... .......... .......... .......... .......... 94% 4.79M 0s\n  8950K .......... .......... .......... .......... .......... 94% 4.04M 0s\n  9000K .......... .......... .......... .......... .......... 95% 5.07M 0s\n  9050K .......... .......... .......... .......... .......... 95% 4.41M 0s\n  9100K .......... .......... .......... .......... .......... 96% 6.70M 0s\n  9150K .......... .......... .......... .......... .......... 96% 4.56M 0s\n  9200K .......... .......... .......... .......... .......... 97% 2.48M 0s\n  9250K .......... .......... .......... .......... .......... 97% 4.99M 0s\n  9300K .......... .......... .......... .......... .......... 98% 4.83M 0s\n  9350K .......... .......... .......... .......... .......... 99% 4.89M 0s\n  9400K .......... .......... .......... .......... .......... 99% 3.70M 0s\n  9450K .......... .......... .......... .......... .         100% 8.24M=2.5s\n\n2016-05-19 14:11:09 (3.76 MB/s) - “/tmp/flights.csv” saved [9719582/9719582]\n\nDownloaded!\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 2:11:04 PM","dateFinished":"May 19, 2016 2:11:09 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337"},{"title":"Move Datasets to HDFS","text":"%sh\n\n# remove existing copies of dataset from HDFS\nhadoop fs -rm -r -f /tmp/airflightsdelays\n\n# create directory on HDFS\nhadoop fs -mkdir /tmp/airflightsdelays\n\n# put data into HDFS\nhadoop fs -put /tmp/flights.csv /tmp/airflightsdelays/","dateUpdated":"May 19, 2016 2:11:20 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998826_-902381729","id":"20160519-140958_224465371","result":{"code":"SUCCESS","type":"TEXT","msg":"16/05/19 14:11:28 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 360 minutes, Emptier interval = 0 minutes.\nMoved: 'hdfs://sandbox.hortonworks.com:8020/tmp/airflightsdelays' to trash at: hdfs://sandbox.hortonworks.com:8020/user/zeppelin/.Trash/Current\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 2:11:21 PM","dateFinished":"May 19, 2016 2:11:35 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"title":"Preview Downloaded File","text":"%sh\nhadoop fs -cat /tmp/airflightsdelays/flights.csv | head","dateUpdated":"May 19, 2016 2:11:54 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998827_-902766478","id":"20160519-140958_1608206265","result":{"code":"SUCCESS","type":"TEXT","msg":"Year,Month,DayofMonth,DayOfWeek,DepTime,CRSDepTime,ArrTime,CRSArrTime,UniqueCarrier,FlightNum,TailNum,ActualElapsedTime,CRSElapsedTime,AirTime,ArrDelay,DepDelay,Origin,Dest,Distance,TaxiIn,TaxiOut,Cancelled,CancellationCode,Diverted,CarrierDelay,WeatherDelay,NASDelay,SecurityDelay,LateAircraftDelay\n2008,1,3,4,2003,1955,2211,2225,WN,335,N712SW,128,150,116,-14,8,IAD,TPA,810,4,8,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,754,735,1002,1000,WN,3231,N772SW,128,145,113,2,19,IAD,TPA,810,5,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,628,620,804,750,WN,448,N428WN,96,90,76,14,8,IND,BWI,515,3,17,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,926,930,1054,1100,WN,1746,N612SW,88,90,78,-6,-4,IND,BWI,515,3,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1829,1755,1959,1925,WN,3920,N464WN,90,90,77,34,34,IND,BWI,515,3,10,0,,0,2,0,0,0,32\n2008,1,3,4,1940,1915,2121,2110,WN,378,N726SW,101,115,87,11,25,IND,JAX,688,4,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1937,1830,2037,1940,WN,509,N763SW,240,250,230,57,67,IND,LAS,1591,3,7,0,,0,10,0,0,0,47\n2008,1,3,4,1039,1040,1132,1150,WN,535,N428WN,233,250,219,-18,-1,IND,LAS,1591,7,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,617,615,652,650,WN,11,N689SW,95,95,70,2,2,IND,MCI,451,6,19,0,,0,NA,NA,NA,NA,NA\ncat: Unable to write to output stream.\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 2:11:55 PM","dateFinished":"May 19, 2016 2:11:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"text":"// Spark Context and Spark SQL Context are automatically initialized in Zeppelin so we will skip those steps\n//val sc: Spark Context\n//val sqlContext: SQL Context\n\n// Create a DataFrame from datasets\nval df = sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\")       // Use first line of all files as header\n    .option(\"inferSchema\", \"true\")  // Automatically infer data types\n    .load(\"/tmp/airflightsdelays/\") // Read all flights","dateUpdated":"May 19, 2016 4:18:40 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998827_-902766478","id":"20160519-140958_893514713","result":{"code":"SUCCESS","type":"TEXT","msg":"df: org.apache.spark.sql.DataFrame = [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, DepTime: string, CRSDepTime: int, ArrTime: string, CRSArrTime: int, UniqueCarrier: string, FlightNum: int, TailNum: string, ActualElapsedTime: string, CRSElapsedTime: int, AirTime: string, ArrDelay: string, DepDelay: string, Origin: string, Dest: string, Distance: int, TaxiIn: string, TaxiOut: string, Cancelled: int, CancellationCode: string, Diverted: int, CarrierDelay: string, WeatherDelay: string, NASDelay: string, SecurityDelay: string, LateAircraftDelay: string]\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 4:18:40 PM","dateFinished":"May 19, 2016 4:18:42 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:340","focus":true},{"text":"// Print the schema in a tree format\ndf.printSchema","dateUpdated":"May 19, 2016 4:19:11 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998827_-902766478","id":"20160519-140958_2096121567","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- Year: integer (nullable = true)\n |-- Month: integer (nullable = true)\n |-- DayofMonth: integer (nullable = true)\n |-- DayOfWeek: integer (nullable = true)\n |-- DepTime: string (nullable = true)\n |-- CRSDepTime: integer (nullable = true)\n |-- ArrTime: string (nullable = true)\n |-- CRSArrTime: integer (nullable = true)\n |-- UniqueCarrier: string (nullable = true)\n |-- FlightNum: integer (nullable = true)\n |-- TailNum: string (nullable = true)\n |-- ActualElapsedTime: string (nullable = true)\n |-- CRSElapsedTime: integer (nullable = true)\n |-- AirTime: string (nullable = true)\n |-- ArrDelay: string (nullable = true)\n |-- DepDelay: string (nullable = true)\n |-- Origin: string (nullable = true)\n |-- Dest: string (nullable = true)\n |-- Distance: integer (nullable = true)\n |-- TaxiIn: string (nullable = true)\n |-- TaxiOut: string (nullable = true)\n |-- Cancelled: integer (nullable = true)\n |-- CancellationCode: string (nullable = true)\n |-- Diverted: integer (nullable = true)\n |-- CarrierDelay: string (nullable = true)\n |-- WeatherDelay: string (nullable = true)\n |-- NASDelay: string (nullable = true)\n |-- SecurityDelay: string (nullable = true)\n |-- LateAircraftDelay: string (nullable = true)\n\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 4:19:11 PM","dateFinished":"May 19, 2016 4:19:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341","focus":true},{"title":"Dataset Description","text":"%angular\n\n<table width=\"100%\">\n<tbody><tr>\n  <th></th>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n <td>1  </td><td> Year              </td><td>1987-2008</td>\n</tr><tr>\n <td>2  </td><td> Month             </td><td>1-12</td>\n</tr><tr>\n <td>3  </td><td> DayofMonth        </td><td>1-31</td>\n</tr><tr>\n <td>4  </td><td> DayOfWeek         </td><td>1 (Monday) - 7 (Sunday)</td>\n</tr><tr>\n <td>5  </td><td> DepTime           </td><td>actual departure time (local, hhmm)</td>\n</tr><tr>\n <td>6  </td><td> CRSDepTime        </td><td>scheduled departure time (local, hhmm)</td>\n</tr><tr>\n <td>7  </td><td> ArrTime           </td><td>actual arrival time (local, hhmm)</td>\n</tr><tr>\n <td>8  </td><td> CRSArrTime        </td><td>scheduled arrival time (local, hhmm)</td>\n</tr><tr>\n <td>9  </td><td> UniqueCarrier     </td><td><a href=\"supplemental-data.html\">unique carrier code</a></td>\n</tr><tr>\n <td>10 </td><td> FlightNum         </td><td>flight number</td>\n</tr><tr>\n <td>11 </td><td> TailNum           </td><td>plane tail number</td>\n</tr><tr>\n <td>12 </td><td> ActualElapsedTime </td><td>in minutes</td>\n</tr><tr>\n <td>13 </td><td> CRSElapsedTime    </td><td>in minutes</td>\n</tr><tr>\n <td>14 </td><td> AirTime           </td><td>in minutes</td>\n</tr><tr>\n <td>15 </td><td> ArrDelay          </td><td>arrival delay, in minutes</td>\n</tr><tr>\n <td>16 </td><td> DepDelay          </td><td>departure delay, in minutes</td>\n</tr><tr>\n <td>17 </td><td> Origin            </td><td>origin <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>18 </td><td> Dest              </td><td>destination <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>19 </td><td> Distance          </td><td>in miles</td>\n</tr><tr>\n <td>20 </td><td> TaxiIn            </td><td>taxi in time, in minutes</td>\n</tr><tr>\n <td>21 </td><td> TaxiOut           </td><td>taxi out time in minutes</td>\n</tr><tr>\n <td>22 </td><td> Cancelled           </td><td>was the flight cancelled?</td>\n</tr><tr>\n <td>23 </td><td> CancellationCode  </td><td>reason for cancellation (A = carrier, B = weather, C = NAS, D = security)</td>\n</tr><tr>\n <td>24 </td><td> Diverted          </td><td>1 = yes, 0 = no</td>\n</tr><tr>\n <td>25 </td><td> CarrierDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>26 </td><td> WeatherDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>27 </td><td> NASDelay          </td><td>in minutes</td>\n</tr><tr>\n <td>28 </td><td> SecurityDelay     </td><td>in minutes</td>\n</tr><tr>\n <td>29 </td><td> LateAircraftDelay </td><td>in minutes</td>\n</tr>\n</tbody></table>","dateUpdated":"May 19, 2016 2:15:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998828_-904690223","id":"20160519-140958_45947534","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<table width=\"100%\">\n<tbody><tr>\n  <th></th>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n <td>1  </td><td> Year              </td><td>1987-2008</td>\n</tr><tr>\n <td>2  </td><td> Month             </td><td>1-12</td>\n</tr><tr>\n <td>3  </td><td> DayofMonth        </td><td>1-31</td>\n</tr><tr>\n <td>4  </td><td> DayOfWeek         </td><td>1 (Monday) - 7 (Sunday)</td>\n</tr><tr>\n <td>5  </td><td> DepTime           </td><td>actual departure time (local, hhmm)</td>\n</tr><tr>\n <td>6  </td><td> CRSDepTime        </td><td>scheduled departure time (local, hhmm)</td>\n</tr><tr>\n <td>7  </td><td> ArrTime           </td><td>actual arrival time (local, hhmm)</td>\n</tr><tr>\n <td>8  </td><td> CRSArrTime        </td><td>scheduled arrival time (local, hhmm)</td>\n</tr><tr>\n <td>9  </td><td> UniqueCarrier     </td><td><a href=\"supplemental-data.html\">unique carrier code</a></td>\n</tr><tr>\n <td>10 </td><td> FlightNum         </td><td>flight number</td>\n</tr><tr>\n <td>11 </td><td> TailNum           </td><td>plane tail number</td>\n</tr><tr>\n <td>12 </td><td> ActualElapsedTime </td><td>in minutes</td>\n</tr><tr>\n <td>13 </td><td> CRSElapsedTime    </td><td>in minutes</td>\n</tr><tr>\n <td>14 </td><td> AirTime           </td><td>in minutes</td>\n</tr><tr>\n <td>15 </td><td> ArrDelay          </td><td>arrival delay, in minutes</td>\n</tr><tr>\n <td>16 </td><td> DepDelay          </td><td>departure delay, in minutes</td>\n</tr><tr>\n <td>17 </td><td> Origin            </td><td>origin <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>18 </td><td> Dest              </td><td>destination <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>19 </td><td> Distance          </td><td>in miles</td>\n</tr><tr>\n <td>20 </td><td> TaxiIn            </td><td>taxi in time, in minutes</td>\n</tr><tr>\n <td>21 </td><td> TaxiOut           </td><td>taxi out time in minutes</td>\n</tr><tr>\n <td>22 </td><td> Cancelled           </td><td>was the flight cancelled?</td>\n</tr><tr>\n <td>23 </td><td> CancellationCode  </td><td>reason for cancellation (A = carrier, B = weather, C = NAS, D = security)</td>\n</tr><tr>\n <td>24 </td><td> Diverted          </td><td>1 = yes, 0 = no</td>\n</tr><tr>\n <td>25 </td><td> CarrierDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>26 </td><td> WeatherDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>27 </td><td> NASDelay          </td><td>in minutes</td>\n</tr><tr>\n <td>28 </td><td> SecurityDelay     </td><td>in minutes</td>\n</tr><tr>\n <td>29 </td><td> LateAircraftDelay </td><td>in minutes</td>\n</tr>\n</tbody></table>"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:342"},{"text":"%md\n### Part 1: Using DataFrames API to Analyze Airline Dataset","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998829_-905074972","id":"20160519-140958_1293574665","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Part 1: Using DataFrames API to Analyze Airline Dataset</h3>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:343"},{"title":"Part 1: Using DataFrames to Analyze Dataset","text":"// Show a subset of columns with \"select\"\ndf.select(\"UniqueCarrier\", \"FlightNum\", \"DepDelay\", \"ArrDelay\", \"Distance\").show","dateUpdated":"May 19, 2016 4:19:17 PM","config":{"enabled":true,"title":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998830_-903920725","id":"20160519-140958_2132436074","result":{"code":"SUCCESS","type":"TEXT","msg":"+-------------+---------+--------+--------+--------+\n|UniqueCarrier|FlightNum|DepDelay|ArrDelay|Distance|\n+-------------+---------+--------+--------+--------+\n|           WN|      335|       8|     -14|     810|\n|           WN|     3231|      19|       2|     810|\n|           WN|      448|       8|      14|     515|\n|           WN|     1746|      -4|      -6|     515|\n|           WN|     3920|      34|      34|     515|\n|           WN|      378|      25|      11|     688|\n|           WN|      509|      67|      57|    1591|\n|           WN|      535|      -1|     -18|    1591|\n|           WN|       11|       2|       2|     451|\n|           WN|      810|       0|     -16|     451|\n|           WN|      100|       6|       1|     828|\n|           WN|     1333|      94|      80|     828|\n|           WN|      829|      -4|       1|     162|\n|           WN|     1016|       0|      10|     162|\n|           WN|     1827|       2|      -4|     162|\n|           WN|     2272|       9|      11|     162|\n|           WN|      675|      27|      15|    1489|\n|           WN|     1144|       9|     -15|    1489|\n|           WN|        4|      28|      16|     838|\n|           WN|       54|      51|      37|     220|\n+-------------+---------+--------+--------+--------+\nonly showing top 20 rows\n\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 4:19:17 PM","dateFinished":"May 19, 2016 4:19:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:344","focus":true},{"text":"// Create a DataFrame containing Flights with delayed Departure by more than 15 min using \"filter\"\nval delayedDF = df.select(\"UniqueCarrier\", \"DepDelay\").filter($\"DepDelay\" > 15).cache\ndelayedDF.show","dateUpdated":"May 19, 2016 4:19:22 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998831_-904305474","id":"20160519-140958_498510935","result":{"code":"SUCCESS","type":"TEXT","msg":"delayedDF: org.apache.spark.sql.DataFrame = [UniqueCarrier: string, DepDelay: string]\n+-------------+--------+\n|UniqueCarrier|DepDelay|\n+-------------+--------+\n|           WN|      19|\n|           WN|      34|\n|           WN|      25|\n|           WN|      67|\n|           WN|      94|\n|           WN|      27|\n|           WN|      28|\n|           WN|      51|\n|           WN|      32|\n|           WN|      20|\n|           WN|      25|\n|           WN|      87|\n|           WN|      29|\n|           WN|      82|\n|           WN|      19|\n|           WN|      39|\n|           WN|      82|\n|           WN|      22|\n|           WN|      29|\n|           WN|      56|\n+-------------+--------+\nonly showing top 20 rows\n\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 4:19:22 PM","dateFinished":"May 19, 2016 4:19:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:345","focus":true},{"text":"// Print total number of delayed flights\nprintln(\"Total Number of Delayed Flights: \" + delayedDF.count)","dateUpdated":"May 19, 2016 4:19:27 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998831_-904305474","id":"20160519-140958_1139577598","result":{"code":"SUCCESS","type":"TEXT","msg":"Total Number of Delayed Flights: 19587\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 4:19:27 PM","dateFinished":"May 19, 2016 4:19:28 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:346","focus":true},{"title":"Define a UDF to Determine Delays - See \"Using SparkSQL UDFs to Create Date Times \" Zeppelin Notebook for more detailed explanation on UDFS","text":"import org.apache.spark.sql.functions.udf\n\n// Define a UDF to find delayed flights\n\n// Assume:\n//  if ArrDelay is not available then Delayed = False\n//  if ArrDelay > 15 min then Delayed = True else False\n\nval isDelayedUDF = udf((time: String) => if (time == \"NA\") 0 else if (time.toInt > 15) 1 else 0)","dateUpdated":"May 19, 2016 4:33:47 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998832_-893917254","id":"20160519-140958_1621525640","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.sql.functions.udf\nisDelayedUDF: org.apache.spark.sql.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,List(StringType))\n"},"dateCreated":"May 19, 2016 2:09:58 PM","dateStarted":"May 19, 2016 4:19:31 PM","dateFinished":"May 19, 2016 4:19:32 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:347","focus":true},{"text":"// Define a new DataFrame that contains a subset of the original columns and a new column \"IsDelayed\" by applying a UDF\n// isDelayed()  on \"DepDelay\" column\n\nval updatedDF = df.select($\"Year\", $\"Month\", $\"DayofMonth\", $\"DayOfWeek\", $\"CRSDepTime\", $\"UniqueCarrier\", $\"FlightNum\", \n                    $\"DepDelay\", $\"Origin\", $\"Dest\", $\"TaxiIn\", $\"TaxiOut\", $\"Distance\",\n                    isDelayedUDF($\"DepDelay\").alias(\"IsDelayed\")).cache\n\nupdatedDF.show // Notice new column \"IsDelayed\"","dateUpdated":"May 19, 2016 4:19:35 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998832_-893917254","id":"20160519-140958_1413951050","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:348","dateFinished":"May 19, 2016 4:19:37 PM","dateStarted":"May 19, 2016 4:19:36 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"updatedDF: org.apache.spark.sql.DataFrame = [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n|2008|    1|         3|        4|      1915|           WN|      378|      25|   IND| JAX|     4|     10|     688|        1|\n|2008|    1|         3|        4|      1830|           WN|      509|      67|   IND| LAS|     3|      7|    1591|        1|\n|2008|    1|         3|        4|      1040|           WN|      535|      -1|   IND| LAS|     7|      7|    1591|        0|\n|2008|    1|         3|        4|       615|           WN|       11|       2|   IND| MCI|     6|     19|     451|        0|\n|2008|    1|         3|        4|      1620|           WN|      810|       0|   IND| MCI|     3|      6|     451|        0|\n|2008|    1|         3|        4|       700|           WN|      100|       6|   IND| MCO|     5|     19|     828|        0|\n|2008|    1|         3|        4|      1510|           WN|     1333|      94|   IND| MCO|     6|      8|     828|        1|\n|2008|    1|         3|        4|      1430|           WN|      829|      -4|   IND| MDW|     9|     12|     162|        0|\n|2008|    1|         3|        4|       715|           WN|     1016|       0|   IND| MDW|     7|     21|     162|        0|\n|2008|    1|         3|        4|      1700|           WN|     1827|       2|   IND| MDW|     4|     10|     162|        0|\n|2008|    1|         3|        4|      1020|           WN|     2272|       9|   IND| MDW|     6|      9|     162|        0|\n|2008|    1|         3|        4|      1425|           WN|      675|      27|   IND| PHX|     7|      8|    1489|        1|\n|2008|    1|         3|        4|       745|           WN|     1144|       9|   IND| PHX|     5|     16|    1489|        0|\n|2008|    1|         3|        4|      1255|           WN|        4|      28|   IND| TPA|     4|      9|     838|        1|\n|2008|    1|         3|        4|      1325|           WN|       54|      51|   ISP| BWI|     2|      5|     220|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 20 rows\n\n"},"focus":true},{"title":"Calculate Percentage of Delayed Flights","text":"updatedDF.agg((sum(\"IsDelayed\") * 100 / count(\"DepDelay\")).alias(\"Percentage of Delayed Flights\")).show","dateUpdated":"May 19, 2016 4:20:02 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998833_-894302002","id":"20160519-140958_221259648","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:349","dateFinished":"May 19, 2016 4:20:04 PM","dateStarted":"May 19, 2016 4:20:02 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"+-----------------------------+\n|Percentage of Delayed Flights|\n+-----------------------------+\n|                       19.587|\n+-----------------------------+\n\n"},"focus":true},{"title":"Find Avg Taxi-out","text":"// Show only Origin, Dest, and TaxiOut columns\nupdatedDF.select(\"Origin\", \"Dest\", \"TaxiOut\").groupBy(\"Origin\", \"Dest\").agg(avg(\"TaxiOut\").alias(\"AvgTaxiOut\")).orderBy(desc(\"AvgTaxiOut\")).show(10)","dateUpdated":"May 19, 2016 4:20:08 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998833_-894302002","id":"20160519-140958_1416710979","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:350","dateFinished":"May 19, 2016 4:20:11 PM","dateStarted":"May 19, 2016 4:20:08 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"+------+----+----------+\n|Origin|Dest|AvgTaxiOut|\n+------+----+----------+\n|   LCH| IAH|      84.0|\n|   EWR| BHM|      63.0|\n|   EWR| SDF|      45.0|\n|   EWR| GSO|      36.5|\n|   MHT| CLE|      33.0|\n|   EWR| JAX|      28.0|\n|   EWR| DTW|      27.0|\n|   CLE| SDF|      27.0|\n|   ORD| EWR|      26.0|\n|   EWR| MCI|      26.0|\n+------+----+----------+\nonly showing top 10 rows\n\n"},"focus":true},{"text":"%md\n\nIn the next paragraph replace `<FILL IN>` with your own code. Reference [SparkSQL documentation](https://spark.apache.org/docs/1.1.0/sql-programming-guide.html) and previous examples.","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998834_-893147756","id":"20160519-140958_1510229764","result":{"code":"SUCCESS","type":"HTML","msg":"<p>In the next paragraph replace <code>&lt;FILL IN&gt;</code> with your own code. Reference <a href=\"https://spark.apache.org/docs/1.1.0/sql-programming-guide.html\">SparkSQL documentation</a> and previous examples.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:351"},{"title":"Find Avg Taxi-in","text":"// Find average TaxiIn\n// Show only Origin, Dest, and TaxiIn columns\n// Use aggregate functions on the updatedDF DataFrame to complete the code\n\nupdatedDF.<FILL IN>","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998834_-893147756","id":"20160519-140958_1322419655","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:352"},{"title":"SOLUTION (click 'Show output', i.e. closed notepad icon on the right)","text":"%md\n\n`updatedDF.select(\"Origin\", \"Dest\", \"TaxiIn\").groupBy(\"Origin\", \"Dest\").agg(avg(\"TaxiIn\").alias(\"AvgTaxiIn\")).orderBy(desc(\"AvgTaxiIn\")).show(10)`","dateUpdated":"May 19, 2016 4:20:24 PM","config":{"enabled":true,"tableHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998835_-893532505","id":"20160519-140958_1598878782","result":{"code":"SUCCESS","type":"HTML","msg":"<p><code>updatedDF.select(\"Origin\", \"Dest\", \"TaxiIn\").groupBy(\"Origin\", \"Dest\").agg(avg(\"TaxiIn\").alias(\"AvgTaxiIn\")).orderBy(desc(\"AvgTaxiIn\")).show(10)</code></p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:353"},{"text":"%md\n### Part 2: Using SQL to Analyze the Airline Dataset","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998836_-895456249","id":"20160519-140958_892814163","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Part 2: Using SQL to Analyze the Airline Dataset</h3>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:354"},{"title":"","text":"%md\nNow let's use SQL statements to analyze our dataset.","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998836_-895456249","id":"20160519-140958_1059395952","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Now let's use SQL statements to analyze our dataset.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:355"},{"title":"Register a Temporary Table","text":"// Convert DataFrame to a Temporary Table\nupdatedDF.registerTempTable(\"flightsTempTbl\")","dateUpdated":"May 19, 2016 4:20:37 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998836_-895456249","id":"20160519-140958_480847987","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:356","dateFinished":"May 19, 2016 4:20:38 PM","dateStarted":"May 19, 2016 4:20:37 PM","focus":true},{"title":"Preview Table","text":"%sql\n\nSELECT * FROM flightsTempTbl LIMIT 10","dateUpdated":"May 19, 2016 4:20:42 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998837_-895840998","id":"20160519-140958_631153848","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:357","dateFinished":"May 19, 2016 4:20:43 PM","dateStarted":"May 19, 2016 4:20:43 PM","result":{"code":"SUCCESS","type":"TABLE","msg":"Year\tMonth\tDayofMonth\tDayOfWeek\tCRSDepTime\tUniqueCarrier\tFlightNum\tDepDelay\tOrigin\tDest\tTaxiIn\tTaxiOut\tDistance\tIsDelayed\n2008\t1\t3\t4\t1955\tWN\t335\t8\tIAD\tTPA\t4\t8\t810\t0\n2008\t1\t3\t4\t735\tWN\t3231\t19\tIAD\tTPA\t5\t10\t810\t1\n2008\t1\t3\t4\t620\tWN\t448\t8\tIND\tBWI\t3\t17\t515\t0\n2008\t1\t3\t4\t930\tWN\t1746\t-4\tIND\tBWI\t3\t7\t515\t0\n2008\t1\t3\t4\t1755\tWN\t3920\t34\tIND\tBWI\t3\t10\t515\t1\n2008\t1\t3\t4\t1915\tWN\t378\t25\tIND\tJAX\t4\t10\t688\t1\n2008\t1\t3\t4\t1830\tWN\t509\t67\tIND\tLAS\t3\t7\t1591\t1\n2008\t1\t3\t4\t1040\tWN\t535\t-1\tIND\tLAS\t7\t7\t1591\t0\n2008\t1\t3\t4\t615\tWN\t11\t2\tIND\tMCI\t6\t19\t451\t0\n2008\t1\t3\t4\t1620\tWN\t810\t0\tIND\tMCI\t3\t6\t451\t0\n","comment":"","msgTable":[[{"key":"Month","value":"2008"},{"key":"Month","value":"1"},{"key":"Month","value":"3"},{"key":"Month","value":"4"},{"key":"Month","value":"1955"},{"key":"Month","value":"WN"},{"key":"Month","value":"335"},{"key":"Month","value":"8"},{"key":"Month","value":"IAD"},{"key":"Month","value":"TPA"},{"key":"Month","value":"4"},{"key":"Month","value":"8"},{"key":"Month","value":"810"},{"key":"Month","value":"0"}],[{"key":"DayofMonth","value":"2008"},{"key":"DayofMonth","value":"1"},{"key":"DayofMonth","value":"3"},{"key":"DayofMonth","value":"4"},{"key":"DayofMonth","value":"735"},{"key":"DayofMonth","value":"WN"},{"key":"DayofMonth","value":"3231"},{"key":"DayofMonth","value":"19"},{"key":"DayofMonth","value":"IAD"},{"key":"DayofMonth","value":"TPA"},{"key":"DayofMonth","value":"5"},{"key":"DayofMonth","value":"10"},{"key":"DayofMonth","value":"810"},{"key":"DayofMonth","value":"1"}],[{"key":"DayOfWeek","value":"2008"},{"key":"DayOfWeek","value":"1"},{"key":"DayOfWeek","value":"3"},{"key":"DayOfWeek","value":"4"},{"key":"DayOfWeek","value":"620"},{"key":"DayOfWeek","value":"WN"},{"key":"DayOfWeek","value":"448"},{"key":"DayOfWeek","value":"8"},{"key":"DayOfWeek","value":"IND"},{"key":"DayOfWeek","value":"BWI"},{"key":"DayOfWeek","value":"3"},{"key":"DayOfWeek","value":"17"},{"key":"DayOfWeek","value":"515"},{"key":"DayOfWeek","value":"0"}],[{"key":"CRSDepTime","value":"2008"},{"key":"CRSDepTime","value":"1"},{"key":"CRSDepTime","value":"3"},{"key":"CRSDepTime","value":"4"},{"key":"CRSDepTime","value":"930"},{"key":"CRSDepTime","value":"WN"},{"key":"CRSDepTime","value":"1746"},{"key":"CRSDepTime","value":"-4"},{"key":"CRSDepTime","value":"IND"},{"key":"CRSDepTime","value":"BWI"},{"key":"CRSDepTime","value":"3"},{"key":"CRSDepTime","value":"7"},{"key":"CRSDepTime","value":"515"},{"key":"CRSDepTime","value":"0"}],[{"key":"UniqueCarrier","value":"2008"},{"key":"UniqueCarrier","value":"1"},{"key":"UniqueCarrier","value":"3"},{"key":"UniqueCarrier","value":"4"},{"key":"UniqueCarrier","value":"1755"},{"key":"UniqueCarrier","value":"WN"},{"key":"UniqueCarrier","value":"3920"},{"key":"UniqueCarrier","value":"34"},{"key":"UniqueCarrier","value":"IND"},{"key":"UniqueCarrier","value":"BWI"},{"key":"UniqueCarrier","value":"3"},{"key":"UniqueCarrier","value":"10"},{"key":"UniqueCarrier","value":"515"},{"key":"UniqueCarrier","value":"1"}],[{"key":"FlightNum","value":"2008"},{"key":"FlightNum","value":"1"},{"key":"FlightNum","value":"3"},{"key":"FlightNum","value":"4"},{"key":"FlightNum","value":"1915"},{"key":"FlightNum","value":"WN"},{"key":"FlightNum","value":"378"},{"key":"FlightNum","value":"25"},{"key":"FlightNum","value":"IND"},{"key":"FlightNum","value":"JAX"},{"key":"FlightNum","value":"4"},{"key":"FlightNum","value":"10"},{"key":"FlightNum","value":"688"},{"key":"FlightNum","value":"1"}],[{"key":"DepDelay","value":"2008"},{"key":"DepDelay","value":"1"},{"key":"DepDelay","value":"3"},{"key":"DepDelay","value":"4"},{"key":"DepDelay","value":"1830"},{"key":"DepDelay","value":"WN"},{"key":"DepDelay","value":"509"},{"key":"DepDelay","value":"67"},{"key":"DepDelay","value":"IND"},{"key":"DepDelay","value":"LAS"},{"key":"DepDelay","value":"3"},{"key":"DepDelay","value":"7"},{"key":"DepDelay","value":"1591"},{"key":"DepDelay","value":"1"}],[{"key":"Origin","value":"2008"},{"key":"Origin","value":"1"},{"key":"Origin","value":"3"},{"key":"Origin","value":"4"},{"key":"Origin","value":"1040"},{"key":"Origin","value":"WN"},{"key":"Origin","value":"535"},{"key":"Origin","value":"-1"},{"key":"Origin","value":"IND"},{"key":"Origin","value":"LAS"},{"key":"Origin","value":"7"},{"key":"Origin","value":"7"},{"key":"Origin","value":"1591"},{"key":"Origin","value":"0"}],[{"key":"Dest","value":"2008"},{"key":"Dest","value":"1"},{"key":"Dest","value":"3"},{"key":"Dest","value":"4"},{"key":"Dest","value":"615"},{"key":"Dest","value":"WN"},{"key":"Dest","value":"11"},{"key":"Dest","value":"2"},{"key":"Dest","value":"IND"},{"key":"Dest","value":"MCI"},{"key":"Dest","value":"6"},{"key":"Dest","value":"19"},{"key":"Dest","value":"451"},{"key":"Dest","value":"0"}],[{"key":"TaxiIn","value":"2008"},{"key":"TaxiIn","value":"1"},{"key":"TaxiIn","value":"3"},{"key":"TaxiIn","value":"4"},{"key":"TaxiIn","value":"1620"},{"key":"TaxiIn","value":"WN"},{"key":"TaxiIn","value":"810"},{"key":"TaxiIn","value":"0"},{"key":"TaxiIn","value":"IND"},{"key":"TaxiIn","value":"MCI"},{"key":"TaxiIn","value":"3"},{"key":"TaxiIn","value":"6"},{"key":"TaxiIn","value":"451"},{"key":"TaxiIn","value":"0"}]],"columnNames":[{"name":"Year","index":0,"aggr":"sum"},{"name":"Month","index":1,"aggr":"sum"},{"name":"DayofMonth","index":2,"aggr":"sum"},{"name":"DayOfWeek","index":3,"aggr":"sum"},{"name":"CRSDepTime","index":4,"aggr":"sum"},{"name":"UniqueCarrier","index":5,"aggr":"sum"},{"name":"FlightNum","index":6,"aggr":"sum"},{"name":"DepDelay","index":7,"aggr":"sum"},{"name":"Origin","index":8,"aggr":"sum"},{"name":"Dest","index":9,"aggr":"sum"},{"name":"TaxiIn","index":10,"aggr":"sum"},{"name":"TaxiOut","index":11,"aggr":"sum"},{"name":"Distance","index":12,"aggr":"sum"},{"name":"IsDelayed","index":13,"aggr":"sum"}],"rows":[["2008","1","3","4","1955","WN","335","8","IAD","TPA","4","8","810","0"],["2008","1","3","4","735","WN","3231","19","IAD","TPA","5","10","810","1"],["2008","1","3","4","620","WN","448","8","IND","BWI","3","17","515","0"],["2008","1","3","4","930","WN","1746","-4","IND","BWI","3","7","515","0"],["2008","1","3","4","1755","WN","3920","34","IND","BWI","3","10","515","1"],["2008","1","3","4","1915","WN","378","25","IND","JAX","4","10","688","1"],["2008","1","3","4","1830","WN","509","67","IND","LAS","3","7","1591","1"],["2008","1","3","4","1040","WN","535","-1","IND","LAS","7","7","1591","0"],["2008","1","3","4","615","WN","11","2","IND","MCI","6","19","451","0"],["2008","1","3","4","1620","WN","810","0","IND","MCI","3","6","451","0"]]},"focus":true},{"title":"Register UDF","text":"// Register a UDF to find delayed flights\n// Note that this is a UDF specific for use within the sqlContext\n\n// Assume:\n//  if ArrDelay is not available then Delayed = False\n//  if ArrDelay > 15 min then Delayed = True else False\n\nsqlContext.udf.register(\"isDelayedUDF\", (time: String) => if (time == \"NA\") 0 else if (time.toInt > 15) 1 else 0)","dateUpdated":"May 19, 2016 4:26:12 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998838_-894686751","id":"20160519-140958_1380990803","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:358","dateFinished":"May 19, 2016 4:26:13 PM","dateStarted":"May 19, 2016 4:26:13 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"res138: org.apache.spark.sql.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,List(StringType))\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463675295977_-854645580","id":"20160519-162815_1324056339","dateCreated":"May 19, 2016 4:28:15 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1491","text":"def isDelayed  (time: String) = ( if (time == \"NA\") 0 else if (time.toInt > 15) 1 else 0 )","dateUpdated":"May 19, 2016 4:32:44 PM","dateFinished":"May 19, 2016 4:31:23 PM","dateStarted":"May 19, 2016 4:31:23 PM","title":"Using full function definition instead lambda's","result":{"code":"SUCCESS","type":"TEXT","msg":"isDelayed: (time: String)Int\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463675182849_1895418609","id":"20160519-162622_1651183503","dateCreated":"May 19, 2016 4:26:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1472","dateUpdated":"May 19, 2016 4:31:42 PM","dateFinished":"May 19, 2016 4:31:43 PM","dateStarted":"May 19, 2016 4:31:43 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"res141: org.apache.spark.sql.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,List(StringType))\n"},"text":"sqlContext.udf.register(\"isDelayedUDF2\", isDelayed(_:String))"},{"title":"Compare Total Number of Delayed Flights by Carrier","text":"%sql\n\nSELECT UniqueCarrier, SUM(isDelayedUDF(DepDelay)) AS NumDelays FROM flightsTempTbl GROUP BY UniqueCarrier","dateUpdated":"May 19, 2016 4:31:57 PM","config":{"enabled":true,"title":true,"graph":{"mode":"pieChart","height":296,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"NumDelays","index":1,"aggr":"sum"}],"groups":[],"scatter":{"yAxis":{"name":"NumDelays","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/sql","colWidth":6},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998838_-894686751","id":"20160519-140958_309169245","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:359","dateFinished":"May 19, 2016 4:31:58 PM","dateStarted":"May 19, 2016 4:31:57 PM","result":{"code":"SUCCESS","type":"TABLE","msg":"UniqueCarrier\tNumDelays\nWN\t18573\nXE\t1014\n","comment":"","msgTable":[[{"key":"NumDelays","value":"WN"},{"key":"NumDelays","value":"18573"}],[{"value":"XE"},{"value":"1014"}]],"columnNames":[{"name":"UniqueCarrier","index":0,"aggr":"sum"},{"name":"NumDelays","index":1,"aggr":"sum"}],"rows":[["WN","18573"],["XE","1014"]]},"focus":true},{"title":"Compare Total Delayed Time (min) by Carrier","text":"%sql\n\nSELECT UniqueCarrier, COUNT(DepDelay) AS TotalTimeDelay FROM flightsTempTbl GROUP BY UniqueCarrier","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"TotalTimeDelay","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"UniqueCarrier","index":0,"aggr":"sum"},"yAxis":{"name":"TotalTimeDelay","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/sql","colWidth":6},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998838_-894686751","id":"20160519-140958_1444558622","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:360"},{"text":"%md\n\nIn the paragraph below replace `<FILL IN>` with your code.","dateUpdated":"May 19, 2016 4:34:19 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998838_-894686751","id":"20160519-140958_1394130619","result":{"code":"SUCCESS","type":"HTML","msg":"<p>In the paragraph below replace <code>&lt;FILL IN&gt;</code> with your code.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:361"},{"title":"Find Average Distance Travelled by Carrier","text":"%sql\n\n-- Find average distance by UniqueCarrier from flightsTempTbl\n-- order descending by average distance\n\nSELECT <FILL IN>","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998839_-895071500","id":"20160519-140958_2106724763","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:362"},{"title":"SOLUTION (click 'Show output', i.e. closed notepad icon on the right)","text":"%md\n\n`UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsTempTbl GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC`","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"tableHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998839_-895071500","id":"20160519-140958_12720005","result":{"code":"SUCCESS","type":"HTML","msg":"<p><code>UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsTempTbl GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC</code></p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:363"},{"title":"Find Out When Most Flights Get Delayed by Day of Week","text":"%sql\n\nSELECT DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END AS Delay, COUNT(1) AS Count\nFROM flightsTempTbl\nGROUP BY DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END\nORDER BY DayOfWeek","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"DayOfWeek","index":0,"aggr":"sum"}],"values":[{"name":"Count","index":2,"aggr":"sum"}],"groups":[{"name":"Delay","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"DayOfWeek","index":0,"aggr":"sum"},"yAxis":{"name":"Delay","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998839_-895071500","id":"20160519-140958_1184242982","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:364"},{"title":"Find Out When Most Flights Get Delayed by Hour","text":"%sql\n\nSELECT CAST(CRSDepTime / 100 AS INT) AS Hour, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END AS Delay, COUNT(1) AS Count\nFROM flightsTempTbl\nGROUP BY CAST(CRSDepTime / 100 AS INT), CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END\nORDER BY Hour","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"Hour","index":0,"aggr":"sum"}],"values":[{"name":"Count","index":2,"aggr":"sum"}],"groups":[{"name":"Delay","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Hour","index":0,"aggr":"sum"},"yAxis":{"name":"Delay","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998839_-895071500","id":"20160519-140958_693358078","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:365"},{"text":"%angular\n\n<h3>Save Modes</h3>\n\nSave operations can optionally take a <code>SaveMode</code>, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing a <code>Overwrite</code>, the data will be deleted before writing out the new data.\n<br><br>\n<style>\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n</style>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Mode (Scala/Java)</th>\n    <th>Meaning</th>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.ErrorIfExists (default)</code></td>\n    <td>When saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.</td>\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Append</code></td>\n    <td>When saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Overwrite</code></td>\n    <td>Overwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Ignore</code></td>\n    <td>Ignore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.</td>\n  </tr>\n</table>","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998840_-896995245","id":"20160519-140958_1022948324","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<h3>Save Modes</h3>\n\nSave operations can optionally take a <code>SaveMode</code>, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing a <code>Overwrite</code>, the data will be deleted before writing out the new data.\n<br><br>\n<style>\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n</style>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Mode (Scala/Java)</th>\n    <th>Meaning</th>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.ErrorIfExists (default)</code></td>\n    <td>When saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.</td>\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Append</code></td>\n    <td>When saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Overwrite</code></td>\n    <td>Overwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Ignore</code></td>\n    <td>Ignore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.</td>\n  </tr>\n</table>"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:366"},{"title":"Save to ORC file","text":"import org.apache.spark.sql.SaveMode\n\n// Save and Overwrite results to an ORC file\nupdatedDF.write.format(\"orc\").mode(SaveMode.Overwrite).save(\"flightsAndDelays.orc\")","dateUpdated":"May 19, 2016 4:34:38 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998841_-897379994","id":"20160519-140958_2085887233","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:367","dateFinished":"May 19, 2016 4:34:40 PM","dateStarted":"May 19, 2016 4:34:38 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.sql.SaveMode\n"},"focus":true},{"title":"Load from ORC file","text":"// Load results back from ORC file\nval dfTest = sqlContext.read.format(\"orc\").load(\"flightsAndDelays.orc\")\ndfTest.show","dateUpdated":"May 19, 2016 4:34:44 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998841_-897379994","id":"20160519-140958_1983671403","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:368","dateFinished":"May 19, 2016 4:34:45 PM","dateStarted":"May 19, 2016 4:34:44 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"dfTest: org.apache.spark.sql.DataFrame = [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n|2008|    1|         3|        4|      1915|           WN|      378|      25|   IND| JAX|     4|     10|     688|        1|\n|2008|    1|         3|        4|      1830|           WN|      509|      67|   IND| LAS|     3|      7|    1591|        1|\n|2008|    1|         3|        4|      1040|           WN|      535|      -1|   IND| LAS|     7|      7|    1591|        0|\n|2008|    1|         3|        4|       615|           WN|       11|       2|   IND| MCI|     6|     19|     451|        0|\n|2008|    1|         3|        4|      1620|           WN|      810|       0|   IND| MCI|     3|      6|     451|        0|\n|2008|    1|         3|        4|       700|           WN|      100|       6|   IND| MCO|     5|     19|     828|        0|\n|2008|    1|         3|        4|      1510|           WN|     1333|      94|   IND| MCO|     6|      8|     828|        1|\n|2008|    1|         3|        4|      1430|           WN|      829|      -4|   IND| MDW|     9|     12|     162|        0|\n|2008|    1|         3|        4|       715|           WN|     1016|       0|   IND| MDW|     7|     21|     162|        0|\n|2008|    1|         3|        4|      1700|           WN|     1827|       2|   IND| MDW|     4|     10|     162|        0|\n|2008|    1|         3|        4|      1020|           WN|     2272|       9|   IND| MDW|     6|      9|     162|        0|\n|2008|    1|         3|        4|      1425|           WN|      675|      27|   IND| PHX|     7|      8|    1489|        1|\n|2008|    1|         3|        4|       745|           WN|     1144|       9|   IND| PHX|     5|     16|    1489|        0|\n|2008|    1|         3|        4|      1255|           WN|        4|      28|   IND| TPA|     4|      9|     838|        1|\n|2008|    1|         3|        4|      1325|           WN|       54|      51|   ISP| BWI|     2|      5|     220|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 20 rows\n\n"},"focus":true},{"title":"Compare DataFrame Sizes (i.e. Compare Original DataFrame with one Loaded from HDFS)","text":"// Note: if output assertion succeeds no warning messages will be printed\nassert (dfTest.count == updatedDF.count, println(\"Assertion Fail: Files are of different sizes.\"))","dateUpdated":"May 19, 2016 4:34:48 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998841_-897379994","id":"20160519-140958_2029134193","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:369","dateFinished":"May 19, 2016 4:34:49 PM","dateStarted":"May 19, 2016 4:34:48 PM","focus":true},{"text":"%md\n\n### Saving to Persistent Tables\nUnlike the `registerTempTable` command, `saveAsTable` will materialize the contents of the dataframe and create a pointer to the data in the HiveMetastore. Persistent tables will still exist even after your Spark program has restarted, as long as you maintain your connection to the same metastore. A DataFrame for a persistent table can be created by calling the `table` method on a `SQLContext` with the name of the table.<br>\nBy default `saveAsTable` will create a “managed table”, meaning that the location of the data will be controlled by the metastore. Managed tables will also have their data deleted automatically when a table is dropped.<br>","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998842_-896225747","id":"20160519-140958_1618067391","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Saving to Persistent Tables</h3>\n<p>Unlike the <code>registerTempTable</code> command, <code>saveAsTable</code> will materialize the contents of the dataframe and create a pointer to the data in the HiveMetastore. Persistent tables will still exist even after your Spark program has restarted, as long as you maintain your connection to the same metastore. A DataFrame for a persistent table can be created by calling the <code>table</code> method on a <code>SQLContext</code> with the name of the table.<br>\n<br  />By default <code>saveAsTable</code> will create a “managed table”, meaning that the location of the data will be controlled by the metastore. Managed tables will also have their data deleted automatically when a table is dropped.<br></p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:370"},{"title":"Save to a Table","text":"updatedDF.write.format(\"orc\").mode(SaveMode.Overwrite).saveAsTable(\"flightsPermTbl\")","dateUpdated":"May 19, 2016 4:36:20 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998842_-896225747","id":"20160519-140958_1273218576","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:371","dateFinished":"May 19, 2016 4:36:25 PM","dateStarted":"May 19, 2016 4:36:20 PM","focus":true},{"title":"Read from Table to a New DataFrame","text":"val dfFromTbl = sqlContext.table(\"flightsPermTbl\")","dateUpdated":"May 19, 2016 4:36:34 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998843_-896610496","id":"20160519-140958_1457548124","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:372","dateFinished":"May 19, 2016 4:36:34 PM","dateStarted":"May 19, 2016 4:36:34 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"dfFromTbl: org.apache.spark.sql.DataFrame = [Year: int, Month: int, DayofMonth: int, DayOfWeek: int, CRSDepTime: int, UniqueCarrier: string, FlightNum: int, DepDelay: string, Origin: string, Dest: string, TaxiIn: string, TaxiOut: string, Distance: int, IsDelayed: int]\n"},"focus":true},{"title":"Show Elements of DataFrame","text":"dfFromTbl.show(5)","dateUpdated":"May 19, 2016 4:36:36 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998843_-896610496","id":"20160519-140958_665358739","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:373","dateFinished":"May 19, 2016 4:36:37 PM","dateStarted":"May 19, 2016 4:36:36 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|Year|Month|DayofMonth|DayOfWeek|CRSDepTime|UniqueCarrier|FlightNum|DepDelay|Origin|Dest|TaxiIn|TaxiOut|Distance|IsDelayed|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\n|2008|    1|         3|        4|      1955|           WN|      335|       8|   IAD| TPA|     4|      8|     810|        0|\n|2008|    1|         3|        4|       735|           WN|     3231|      19|   IAD| TPA|     5|     10|     810|        1|\n|2008|    1|         3|        4|       620|           WN|      448|       8|   IND| BWI|     3|     17|     515|        0|\n|2008|    1|         3|        4|       930|           WN|     1746|      -4|   IND| BWI|     3|      7|     515|        0|\n|2008|    1|         3|        4|      1755|           WN|     3920|      34|   IND| BWI|     3|     10|     515|        1|\n+----+-----+----------+---------+----------+-------------+---------+--------+------+----+------+-------+--------+---------+\nonly showing top 5 rows\n\n"},"focus":true},{"title":"Show Tables","text":"%sql\n\nSHOW Tables\n\n-- Notice that unlike flightsTempTbl, flightsPermTbl is a permanent table","dateUpdated":"May 19, 2016 4:36:41 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tableName","index":0,"aggr":"sum"}],"values":[{"name":"isTemporary","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tableName","index":0,"aggr":"sum"},"yAxis":{"name":"isTemporary","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998843_-896610496","id":"20160519-140958_736976444","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:374","dateFinished":"May 19, 2016 4:36:42 PM","dateStarted":"May 19, 2016 4:36:41 PM","result":{"code":"SUCCESS","type":"TABLE","msg":"tableName\tisTemporary\nflightstemptbl\ttrue\ndf\ttrue\nae\tfalse\ndimcustomer\tfalse\ndimcustomertemp\tfalse\ndimproduct\tfalse\ndimproducttemp\tfalse\nfactonlinesales\tfalse\nfactonlinesalestemp\tfalse\nfactsales\tfalse\nfactsalestemp\tfalse\nflightspermtbl\tfalse\nhealth_table\tfalse\nlab\tfalse\nmysql_federated_sample\tfalse\nsample_07\tfalse\nsample_08\tfalse\nvs\tfalse\n","comment":"","msgTable":[[{"key":"isTemporary","value":"flightstemptbl"},{"key":"isTemporary","value":"true"}],[{"value":"df"},{"value":"true"}],[{"value":"ae"},{"value":"false"}],[{"value":"dimcustomer"},{"value":"false"}],[{"value":"dimcustomertemp"},{"value":"false"}],[{"value":"dimproduct"},{"value":"false"}],[{"value":"dimproducttemp"},{"value":"false"}],[{"value":"factonlinesales"},{"value":"false"}],[{"value":"factonlinesalestemp"},{"value":"false"}],[{"value":"factsales"},{"value":"false"}],[{"value":"factsalestemp"},{"value":"false"}],[{"value":"flightspermtbl"},{"value":"false"}],[{"value":"health_table"},{"value":"false"}],[{"value":"lab"},{"value":"false"}],[{"value":"mysql_federated_sample"},{"value":"false"}],[{"value":"sample_07"},{"value":"false"}],[{"value":"sample_08"},{"value":"false"}],[{"value":"vs"},{"value":"false"}]],"columnNames":[{"name":"tableName","index":0,"aggr":"sum"},{"name":"isTemporary","index":1,"aggr":"sum"}],"rows":[["flightstemptbl","true"],["df","true"],["ae","false"],["dimcustomer","false"],["dimcustomertemp","false"],["dimproduct","false"],["dimproducttemp","false"],["factonlinesales","false"],["factonlinesalestemp","false"],["factsales","false"],["factsalestemp","false"],["flightspermtbl","false"],["health_table","false"],["lab","false"],["mysql_federated_sample","false"],["sample_07","false"],["sample_08","false"],["vs","false"]]},"focus":true},{"title":"Drop Managed Table","text":"%sql\n\nDROP TABLE flightsPermTbl","dateUpdated":"May 19, 2016 4:36:54 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998843_-896610496","id":"20160519-140958_1824902059","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:375","dateFinished":"May 19, 2016 4:36:55 PM","dateStarted":"May 19, 2016 4:36:54 PM","result":{"code":"SUCCESS","type":"TABLE","msg":"null\n","comment":"","msgTable":[],"columnNames":[{"name":"null","index":0,"aggr":"sum"}],"rows":[]},"focus":true},{"title":"Describe Table","text":"%sql\n\nSHOW tables\n\n-- notice that flightsPermTbl is no longer available","dateUpdated":"May 19, 2016 4:36:59 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tableName","index":0,"aggr":"sum"}],"values":[{"name":"isTemporary","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tableName","index":0,"aggr":"sum"},"yAxis":{"name":"isTemporary","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/sql","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998844_-898534240","id":"20160519-140958_767459159","dateCreated":"May 19, 2016 2:09:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:376","dateFinished":"May 19, 2016 4:36:59 PM","dateStarted":"May 19, 2016 4:36:59 PM","result":{"code":"SUCCESS","type":"TABLE","msg":"tableName\tisTemporary\nflightstemptbl\ttrue\ndf\ttrue\nae\tfalse\ndimcustomer\tfalse\ndimcustomertemp\tfalse\ndimproduct\tfalse\ndimproducttemp\tfalse\nfactonlinesales\tfalse\nfactonlinesalestemp\tfalse\nfactsales\tfalse\nfactsalestemp\tfalse\nhealth_table\tfalse\nlab\tfalse\nmysql_federated_sample\tfalse\nsample_07\tfalse\nsample_08\tfalse\nvs\tfalse\n","comment":"","msgTable":[[{"key":"isTemporary","value":"flightstemptbl"},{"key":"isTemporary","value":"true"}],[{"value":"df"},{"value":"true"}],[{"value":"ae"},{"value":"false"}],[{"value":"dimcustomer"},{"value":"false"}],[{"value":"dimcustomertemp"},{"value":"false"}],[{"value":"dimproduct"},{"value":"false"}],[{"value":"dimproducttemp"},{"value":"false"}],[{"value":"factonlinesales"},{"value":"false"}],[{"value":"factonlinesalestemp"},{"value":"false"}],[{"value":"factsales"},{"value":"false"}],[{"value":"factsalestemp"},{"value":"false"}],[{"value":"health_table"},{"value":"false"}],[{"value":"lab"},{"value":"false"}],[{"value":"mysql_federated_sample"},{"value":"false"}],[{"value":"sample_07"},{"value":"false"}],[{"value":"sample_08"},{"value":"false"}],[{"value":"vs"},{"value":"false"}]],"columnNames":[{"name":"tableName","index":0,"aggr":"sum"},{"name":"isTemporary","index":1,"aggr":"sum"}],"rows":[["flightstemptbl","true"],["df","true"],["ae","false"],["dimcustomer","false"],["dimcustomertemp","false"],["dimproduct","false"],["dimproducttemp","false"],["factonlinesales","false"],["factonlinesalestemp","false"],["factsales","false"],["factsalestemp","false"],["health_table","false"],["lab","false"],["mysql_federated_sample","false"],["sample_07","false"],["sample_08","false"],["vs","false"]]},"focus":true},{"title":"The End","text":"%md\nYou've reached the end of this lab! We hope you've been able to successfully complete all portions of this lab.","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998844_-898534240","id":"20160519-140958_899301431","result":{"code":"SUCCESS","type":"HTML","msg":"<p>You've reached the end of this lab! We hope you've been able to successfully complete all portions of this lab.</p>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:377"},{"text":"%md\n### Additional Resources\nThis is just the beggining of your journey with Spark. Make sure to checkout these additional useful resources:\n\n1. [Hortonworks Community Connection](https://hortonworks.com/community/) (HCC) for guidance, code, examples and best practices to jump start your projects.\n2. [Spark SQL, DataFrames and DataSets Guide](http://spark.apache.org/docs/latest/sql-programming-guide.html)\n3. [A Lap Around Spark](http://hortonworks.com/hadoop-tutorial/a-lap-around-apache-spark/)","dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998845_-898918989","id":"20160519-140958_569243231","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Additional Resources</h3>\n<p>This is just the beggining of your journey with Spark. Make sure to checkout these additional useful resources:</p>\n<ol>\n<li><a href=\"https://hortonworks.com/community/\">Hortonworks Community Connection</a> (HCC) for guidance, code, examples and best practices to jump start your projects.</li>\n<li><a href=\"http://spark.apache.org/docs/latest/sql-programming-guide.html\">Spark SQL, DataFrames and DataSets Guide</a></li>\n<li><a href=\"http://hortonworks.com/hadoop-tutorial/a-lap-around-apache-spark/\">A Lap Around Spark</a></li>\n</ol>\n"},"dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:378"},{"dateUpdated":"May 19, 2016 2:09:58 PM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463666998845_-898918989","id":"20160519-140958_231336032","dateCreated":"May 19, 2016 2:09:58 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:379"}],"name":"Intro to Spark DataFrames with Scala","id":"2BNSHHTRS","angularObjects":{"2BCKC8XEM":[],"2BCX68DXU":[],"2BFBT15Z1":[],"2BESYJRTZ":[],"2BCBP9D5X":[],"2BDTPNC5U":[],"2BF9DMDST":[],"2BEA4YGRP":[],"2BEP4GTHY":[],"2BD3W8Y9X":[],"2BEJY9WFY":[],"2BCSDJUE3":[],"2BEPFKEXV":[]},"config":{"looknfeel":"default"},"info":{}}